//Edited August 25, 2024

// based on the command .go  
// Created by Developer Alryc


use os;
use uo;
use cfgfile;
include ":staff:include/staff";
include "include/math"; // Used for Mod

const TEXTSTARTLOCY :=  70;  // The location of the top of the gump

var layout := array(      // The layout of the gump with text notes to be added later
"page 0",
"nodispose",
"nomove",
"resizepic  50   0 2600 540 405", // background

"text 120 59 300 0",
"text 220 59 300 1",
"text 270 59 300 2",
"text 320 59 300 0",
"text 420 59 300 1",
"text 470 59 300 2"
);

var data := array(      // The data array that holds all the text to be displayed in the gump
       "Location",         //0
       "Goto",
       "Send"
);

program textcmd_gorealm( who, text )

  // Test to see if the user sent a location via command text.  if not show gump, else attempt travel to that location
  if(!text)

    // The name of the current user of this command
    var tname := lower(who.name);

    // Create the Array
    FillInArrays( tname );

    // Display the array and receive a responce from the player
    var result := SendDialogGump( who, layout, data );

    // If the user canceled, quit
    if (result[0] == 0)
      return;
    endif

    // Open files and set veriables
    var locs    := readconfigfile("::gorealm");
    var MaxLocs := GetConfigMaxIntKey(locs);
    var Dest    := locs[mod(result[0], MaxLocs)];
    var Traveler;

    // Determine if we are teleporting ourselves or someone other and set the traveler variable
    if ( result[0] > MaxLocs ) // teleporting someone else
       SendSysmessage( who , "Select a MOBILE." );
       Traveler :=  Target( who , TGTOPT_NOCHECK_LOS );

       if(!Traveler)
         SendSysmessage( who , "Invalid selection." );
         return;
       endif
		if(result[0] == MaxLocs*2)
			Dest    := locs[MaxLocs];
		endif
    else
      // Teleporting ourself
      Traveler := who;
    endif
	if(result[0] == MaxLocs)
		Dest    := locs[mod(result[0], MaxLocs+1)];
	endif
  LogCommand(who, GetProcess(GetPid()).name, traveler.name+"/"+traveler.serial, "Sent TO "+dest.x+" "+dest.y+" "+dest.realm+" "+GetMapInfo(Dest.X, Dest.Y, dest.realm).Z);
  // Teleport moble
  var move := MoveObjecttoLocation(Traveler, Dest.X, Dest.Y, Dest.Z, Dest.R ,MOVEOBJECT_FORCELOCATION );
	if(!move)
        SendSysMessage( who, "Unable to go there: " + move.errortext );
	endif
  else
	var params := SplitWords( text );
    if (len(params) < 3) // didn't pass Z
        params[3] := GetMapInfo( CInt(params[1]), CInt(params[2]) ,CInt(params[3]));
    endif

	var res := MoveObjectToLocation( who, CInt(params[1]), CInt(params[2]), CInt(params[3]), params[4],MOVEOBJECT_FORCELOCATION );

    if (!res)
        SendSysMessage( who, "Unable to go there: " + res.errortext );
    endif

  endif

endprogram

function FillInArrays( tname )
    var telelocations := readconfigfile("::gorealm");
    var datalen;
    var layoutlen;
    var prev_y := cint(TEXTSTARTLOCY);
    var datindx := 2;
    var buttonret := 1;
    var i, CurrLoc, rowloc:=120, locationscount := 0;
    var numlocations := GetConfigMaxIntKey(telelocations);
    for( i := 1 ; i <= numlocations; i := i + 1  )
      CurrLoc := telelocations[i];
      if ((CurrLoc.TYPE == "all") || (CurrLoc.TYPE == tname))
        locationscount := locationscount + 1;
        datalen := GetgoDataLength();
        layoutlen := GetgoLayoutLength();
        // Store Name
        datindx := datalen+1;
        data[datindx] := CurrLoc.Name;
        if (mod(locationscount, 19) == 1)
          // Pointer Down
          if (locationscount >= 18)
            rowloc :=320;
          endif
          prev_y := TEXTSTARTLOCY;
        endif
        layout[GetgoLayoutLength()+1] := ("text " + rowloc +" "+ cstr(prev_y + 20) + " 995 " + datalen);
        layout[GetgoLayoutLength()+1] := ("button " + (rowloc+110) +" "+cstr(prev_y + 25) + " 2103 2104 1 0 " + ((buttonret+1) / 2)); // Go Button
        layout[GetgoLayoutLength()+1] := ("button " + (rowloc+160) +" "+cstr(prev_y + 25) + " 2103 2104 1 0 " + (((buttonret+1) / 2) + numlocations)); // Send Button
        prev_y := prev_y + 15;
      endif
      buttonret := buttonret + 2;
    endfor
endfunction

// Returns the Length of the Layout Gump Array
function GetgoLayoutLength();
    return (len(layout));
endfunction

// Returns the length of the Names Array that populates the gump.
function GetgoDataLength();
    return (len(data));
endfunction