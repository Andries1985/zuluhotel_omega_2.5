////////////////////////////////////////////////////////////////////////////
//
//  MERCHANT.SRC - Control script for NPC Merchants
//
//  A Merchant NPC must have two object property strings:
//      MerchantType      A MerchantType found in MRCSPAWN.CFG
//
//  "[MerchantSerial] FS" is the merchant's "for sale" inventory.  This is
//                      restocked periodically by MRCSPAWN.SRC
//  "[MerchantSerial] PB" contains items bought from players, now for-sale.
//              (this doesn't work yet)
//
// Updated by: Sentack - 1/14/2000
//   Purpose: Edited 'vendor train' in the following ways
//      NPC lists only the skills they can train PC
//      NPC now train a PC up to 1/3rd their skill level
//      Note that only paying an NPC part of the money isn't perfect yet.
//      NPC returns gold if they can't train PC
//      Test to make sure PC will be trained to the proper level for their
//       gold
//      Added GoldForSkillGain for future updates of skill training costs
//
// Upated by: Zulu (zulu@cadvision.com) March 31/2000
//
// added buy and sell routine
// includes Stable Keeper script by RoTTer (daros@cebinet.com.br)
// i have updated the stable keeper script
// add new commands from the latest pol 087
//
////////////////////////////////////////////////////////////////////////////

use npc;
use basic;
use os;
use uo;
use storage;
include "include/attributes";

include "include/eventid";
include "include/randname";
include "include/utility";
include "include/mrcspawn";
include "include/speech";
include "include/client";
include "include/vetement";
include "ai/setup/modsetup";
include "include/random";
include "include/objtype";
include ":gumps:include/gumps";
include ":gumps:include/gumps_ex";
include "include/npcboosts";

const RESPAWN_MINUTES := 30;     // In how many minutes will the NPC respawn if killed.
const MAX_SKILLS      := 48;     // There are currently 48 Skills.
Const REACT_THRESHOLD := 2;

set_priority( 50 );

var buyimage  := {0x211b, 0x211c, 0x2121, 0x2124, 0x211f, 0x2120, 0x2126, 0x20f6, 0x211a, 0x2123, 0x2125, 0x2122, 0x211e, 0x211d, 0x2119, 0x20e6, 0x2108, 0x2103, 0x2101, 0x2135, 0x2136, 0x2137, 0x2127};

var sellimage := {0xc9, 0xd9, 0xcc, 0xc8, 0xe2, 0xe4, 0x123, 0xdc, 0x06, 0xee, 0xcd, 0xe1, 0xd4, 0x05, 0xd6, 0xcf, 0xd1, 0xd8, 0xcb, 0xd2, 0xda, 0xdb, 0x124};

var pettemplate :={"cat", "dog", "horse", "horse2", "horse3", "horse4", "packhorse", "llama", "bird", "rat", "rabbit", "wolf", "grizzly", "eagle", "panther", "sheep", "goat", "cow", "pig", "desertostard", "frenziedostard", "forestostard", "packllama"};

var storage, inv_fs, inv_pb, inv_1c;
var merchant_type := "AnimalTrainer";
var me := Self();

if( me.name["<random>"] )
case( Random(2) )
0: me.graphic := 400; me.gender := 0;
1: me.graphic := 401; me.gender := 1;
endcase
SetName ( me , RandomName( me ) + " the Animal Trainer");
Habille( me , "AnimalTrainer" );
endif

storage := FindStorageArea( "Merchant Storage" );

if (!storage)
    exit;
endif

inv_fs := find_or_create_item( storage, me.serial + " FS", UOBJ_METALCHEST );
inv_pb := find_or_create_item( storage, me.serial + " PB", UOBJ_METALCHEST );
inv_1c := find_or_create_item( storage, me.serial + " 1C", UOBJ_METALCHEST );

if (!inv_fs or !inv_pb or !inv_1c)
    exit;
endif

RestockInventory( merchant_type, inv_fs );
var next_restock := ReadGameClock() + RESPAWN_MINUTES*60;

EnableEvents( SYSEVENT_ITEM_GIVEN );
EnableEvents( SYSEVENT_SPEECH , REACT_THRESHOLD );

while (1)

		if(!GetObjProperty(me, "lbc") || GetObjProperty(me, "lbc") < ReadGameClock())
			SetObjProperty(me, "lbc", ReadGameClock()+5);
			checkmymod(me);
		endif

    var ev, petname, newpet, i;

    ev := os::wait_for_event( 30 );
    if (ev)

        case (ev.type)
            SYSEVENT_SPEECH:
                say(process_text(ev.text, "default",38));
                if (ev.text["buy"])
                    TurnToward( ev.source );
                    setobjproperty(ev.source, "#buy", 1);
                    var res := SendBuyWindow( ev.source, inv_fs, self(), inv_pb );
                    eraseobjproperty(ev.source, "#buy");
                    if (!res)
                        print( "SendBuyWindow failed: " + res.errortext );
                    endif
                elseif (ev.text["sell"])
                    TurnToward( ev.source );
                    if (getobjproperty(ev.source, "#buy")==1)
                    say( "You can't sell while buying." );
                    else
		    sellanimal( ev.source );
		    endif
                elseif ( ev.text["vendor train"] or ev.text["merchant train"] )
                     TurnToward( ev.source );
                     MerchantTrain( me , ev.source , ev.text );

		elseif (ev.text["stable"])
		     TurnToward (ev.source);
		     stable(ev.source);
                endif

            SYSEVENT_MERCHANT_BOUGHT:
                TurnToward( ev.source );
                PrintTextAbovePrivate( self(), "The total of thy sale is " + ev.amount, ev.source );
                foreach item in EnumerateItemsInContainer( inv_pb )
                    DestroyItem( item );
                endforeach

            SYSEVENT_MERCHANT_SOLD:
                TurnToward( ev.source );
                PrintTextAbovePrivate( self(), "The total of thy purchase is " + ev.amount, ev.source );
		set_priority(1);

                foreach item in EnumerateItemsInContainer( ev.source.backpack )
		petname := item.objtype;

		if ((petname<=0x2137) and (petname>=0x20CF))

		if ((petname==0x20CF) and (item.color==0x02E6))
			   petname :="blackbear";

		elseif (petname==0x2118)
			   petname :="bear";
		else
		for(i:=1;i<=buyimage.size();i:=i+1)
			if (petname==buyimage[i])
			   petname :=pettemplate[i];
			   break;
			endif
		endfor
		endif

		newpet := CreateNPCfromtemplate (petname, ev.source.x, ev.source.y,ev.source.z);

		DestroyItem( item );
                SetObjProperty(newpet, "master", ev.source.serial);
                SetObjProperty(newpet, "prevtamed", 1);
				newpet.script := "tamed";
                RestartScript (newpet);
		endif

                endforeach
		set_priority( 50 );

            SYSEVENT_ITEM_GIVEN:
	        if (ev.item.objtype==UOBJ_GOLD_COIN);
                TrainSkill( me , ev.source , ev.item );
		else
		TurnToward (ev.source);
		Load_Ticket_Data (me, ev.source, ev.item);
		endif

	endcase
	 cleareventque();
    elseif (ReadGameClock() > next_restock)
        RestockInventory( merchant_type, inv_fs );
        next_restock := ReadGameClock() + RESPAWN_MINUTES*60;
    endif
endwhile

function cleareventque()

var ev;
repeat
until (! (ev := os::wait_for_event(0)) );

endfunction

// Used to inform a player if and how much a NPC can train a player
function MerchantTrain( me , who , text )

   var skillcfg := ReadConfigFile( ":shilhook:uoskills" ); // Link to the skills cfg file 'pol\config\skills.cfg'
    var elem;             // used to contain the skill structure for the skill in question.
    var i;                // Counter for various operations

    // Get what the player says and divide it into words
    var words := SplitWords( text );

    // The third word is the skill we are looking for
    var skill := words[3];
	var skillstotrain := {};
    // Test to see if it exists, if not then player wants to know what NPC an train them
	if( !skill )
		var trainable := "";
		// For each of the available skills
		for( i := 0 ; i <= MAX_SKILLS ; i := i+1 )
			// acquire the skills attributes.
			elem := FindConfigElem( skillcfg, i );
			// if the NPC has the skill
			if( GetBaseSkillBaseValue(me, i) )
				// if the NPC's skill is greater then the PC's
				if ((GetBaseSkillBaseValue(me, i)/3) > GetBaseSkillBaseValue(who, i))
					// Add the skill to the string, and increment total train.
					trainable  := trainable + GetAttributeIdBySkillId( i ) + ", ";
					skillstotrain.append( i );
				endif
			endif
		endfor

		
		// If there where skills that the PC can be trained in, list them, else say so.
		if (len(trainable) > 1)
			say( "I can train thee in the following skills:" );
			say(trainable);

			TrainGump(who, skillstotrain);
		else
			say("I can not train thee.");
		endif
    else
        // The player wishes to train in a skill
        skill := lower(skill);
        // for each of the available skills
        for( i := 0 ; i <= MAX_SKILLS ; i := i+1 )
            // Acquire skill attributes
            elem := FindConfigElem( skillcfg , i );
            // Test to see if this skill is the one the player is referring to.
            if( lower(GetConfigString( elem , "Name" )) == skill )
                // Acquire the NPC's value at this skill.
                var NPC_level := (GetEffectiveSkill(me , i) / 3);
                // Test to see if there is a skill value <Redundant check>
                if( NPC_level != 0 )
                    // Get PC's skill
                    var PC_level := GetEffectiveSkill( who , i );
                    // if the pc's skill is greater then the NPC's we can do nothing
                    if( PC_level >= NPC_level )
                        say("I cannot teach you anymore.");
                        return;
                    else
                        // Determine the cost for training the PC, and inform the PC of the cost
                        var skillid := i;
                        var trainmaxcost := GoldForSkillGain(NPC_level, PC_level, skillid);
                        say( "I will train thee " + GetConfigString( elem , "Name" ) + " for " + trainmaxcost + " gold.");
                        // Mark the PC with the skill and The cost to train in the skill
                        SetObjProperty( who , "TrainMaxCost" , trainmaxcost );
                        SetObjProperty( who , "TrainSkillID" , skillid );
                        return;
                    endif
                endif
            endif
        endfor

        // All else, The player named an unknown skill.
        say("I know not of that skill.");
     endif
endfunction

// This handles the NPC's training of the PC or the PC's donation of gold to the NPC
// TODO: Reputation bonus if gold donation is greater then a specific amount.
function TrainSkill( me , who , item )

  var variance := 0;       // The variance between the players skill and the npc's skill
  var NPC_level := 0;      // The NPC's level at the skill
  var PC_level := 0;       // The PC's level at the skill
  var GoldReceived := 0;   // The amount of gold the PC did give us.
  var New_Level := 0;      // The PC's new skill level
  var CurrentNPCCost := 0; // The current NPC's cost for training the Player

  // if the item handed to the NPC was gold and not zero <Integrity check>
  if( (item.objtype == UOBJ_GOLD_COIN) and (item.amount != 0)  )
     // Acquire information on what skill the PC whishes to train in.
     var TrainMaxCost := GetObjProperty( who , "TrainMaxCost" );
     var TrainSkillID := GetObjProperty( who , "TrainSkillID" );

     // If the pc is not expecting training, then it was a donation.
     if( (!TrainMaxCost or !TrainSkillID) and TrainSkillID != 0)
         say( "I don't know what this is for, but thanks!" );
         DestroyItem( item );
      
         return;
     endif

     // If the NPC does have the skill
     if( GetEffectiveSkill(me , TrainSkillID) )
          NPC_level    := GetEffectiveSkill(me,  TrainSkillID) / 3; // Acquire NPC's training level
          PC_level     := GetEffectiveSkill(who, TrainSkillID);     // Acquire PC's  level
          GoldReceived := item.amount;                     // How much gold was received
          variance     := NPC_level - PC_level;            // How many skill points are there between the npc and player.
          CurrentNPCCost := GoldForSkillGain(NPC_level, PC_level, TrainSkillID);

          // Double check to make sure that the pc's skill is lower then the NPC's
          if (PC_level < NPC_level)

            // If what the NPC can train the player is different from what the player is expecting, adjust accordingly.
            if (CurrentNPCCost != TrainMaxCost)

              if (CurrentNPCCost > TrainMaxCost)
                // The current NPC is better then the one we received an offer from.
                NPC_Level := SkillGainForGold(NPC_level, PC_level, TrainSkillID, TrainMaxCost);  // Adjust the NPC's level variable to the lower skill level
                variance  := NPC_level - PC_level;
              else
                // The current NPC is worse then the one we received an offer from.
                // Determine what the cost would be for this NPC
                if (GoldReceived > CurrentNPCCost)
                  // The NPC can't help the player
                  say("I cannot train thee to that level.");
                  MoveItemToContainer( who.backpack , item );
                  return;
                else
                  // The NPC can help, but we need to adjust
                  TrainMaxCost := CurrentNPCCost;
                endif
              endif
            endif

            // Determine what level the player will be trained to
            // if the PC gives the NPC the max cost or more. Train them to the fullest
            if( TrainMaxCost <= GoldReceived )
              New_Level := (NPC_level * 10);
              EraseObjProperty( who , "TrainMaxCost" );  // Clear the trainmaxcost property on the PC.
              EraseObjProperty( who , "TrainSkillID" );  // Clear the skill flag
              // TODO: If the player gives a lot more then the training cost, grant a Reputation Bonus and/or a mini-quest clue.
            else
              // Train the PC to whatever percentage they can afford.
              New_Level := ((PC_level + CInt((CDbl(variance) * (CDbl(GoldReceived) / CDbl(TrainMaxCost))))) * 10);
              SetObjProperty( who , "TrainMaxCost" , TrainMaxCost-GoldReceived );
            endif

            say("Let me show you how it's done.");  // NPC informs player training was successful

            // Set the PC's skill
            SetBaseSkill( who , TrainSkillID , New_Level);

            DestroyItem( item );  // Destroy gold

            SendSysmessage( who , "Your skill increases." ); // Note increase

          else
            // PC just paid NPC to be trained but NPC doesn't have the skill.
            say("I'm not as good as thee.  Please find another to train thee.");
            MoveItemToContainer( who.backpack , item );
          endif
      else
          // NPC does not have that skill to train the PC.  Return gold
          Say("I don't know that skill. Why don't you ask me what i can train you in?");
          MoveItemToContainer( who.backpack , item );
      endif
  else
     // PC gave NPC something else other then gold.  Return it.
     say("Bah, I have no use for this. Be off with ye.");
     MoveItemToContainer( who.backpack , item );
     // TODO: OSI has a "Desires" property with all npc's.  I think it's used to determine if an NPC
     //  gives out clues to a minor quest or reputation bonus, depending on the item donated <Type and value>
  endif

endfunction

// Used to determine cost for raising the pc's skill to the level of the NPC.
// Note: This function is designed to handle different skills have different rates at different levels, etc.
function GoldForSkillGain( NPC_Skill, PC_Skill, skillid )
	skillid := skillid;
  var maxskill := NPC_Skill - PC_Skill;
  return maxskill*10; // Cost equals ten times the difference.
endfunction

// Used to determine what the skill level of the PC will be for the amount of gold they gave
// Note: This function is designed to handle different skills have different rates at different levels, etc.
function SkillGainForGold(NPC_level, PC_level, TrainSkillID, GoldReceived)
	TrainSkillID := TrainSkillID;
	NPC_level := NPC_level;
  return (GoldReceived/10) + PC_Level;
endfunction

function sellanimal (who)

	Say("What pet would you like to sell?");

	var pet := Target(who);

	if ((!pet) or (pet==""))
		SendSysmessage(who, "canceled.");
		return;
	endif

  var tempdata	:= GetObjProperty(pet, "master");
  var summoned	:= GetObjProperty(pet, "summoned");
  var animated	:= GetObjProperty(pet, "animated");
  var charmed	:= GetObjProperty(pet, "charmed");

	if (!tempdata)
		Say("I cannot buy that.");
		return;
	endif

	if ((pet.script == "tamed") and (tempdata == who.serial) and !summoned and !animated and !charmed)

    var buyamount := GetStrength(pet);

    Say(pet.name + " is worth " + buyamount);
    SetObjProperty(pet, "guardkill", 1);
    pet.graphic := 1000;
    ApplyRawDamage(pet, GetMaxHP(pet)+3);

    CreateItemInBackpack(who, UOBJ_GOLD_COIN, buyamount);
    return;
	elseif ( (pet.graphic == CID_HUMAN_MALE) or (pet.graphic == CID_HUMAN_FEMALE) )
		Say("Do I look like an Inn Keeper?!");
  else
		Say("You could sell " + pet.name + " but that is not your pet.");
  endif

endfunction

function Load_Ticket_Data (me, who, ticket)

  var tempdata := 0;
  var newpet := 0;

  if ((ticket.objtype == 0x186E) and (ticket.graphic == 5360))

    tempdata := GetObjProperty(ticket, "petname");
    Say("I will get " + tempdata + " for you. One moment, please.");
    Sleep (1);

    tempdata := GetObjProperty(ticket, "pettemplate");
    newpet := CreateNPCFromTemplate(tempdata, me.x, me.y, me.z, 0, me.realm);

    newpet.name := GetObjProperty(ticket, "petname");
    SetHp(newpet, CInt(GetObjProperty(ticket, "pethp"))); //doesn't work, no errors trown, some other script influencing?
    SetMana(newpet, CInt(GetObjProperty(ticket, "petmana")));
    newpet.color := GetObjProperty(ticket, "petcolor");

    SetObjProperty(newpet, "master", who.serial);
    SetObjProperty(newpet, "prevtamed", 1);
    newpet.script := "tamed";
    RestartScript(newpet);
  
    SetObjProperty(newpet, "nocut", 1);
    SetObjProperty(newpet, "noloot", 1);

    if(GetObjProperty(newpet, "PhysicalProtection") > 100)
      SetObjProperty(newpet, "PhysicalProtection", 1);
      EraseObjProperty(newpet, "AttackTypeImmunities");
    endif

    tempdata := CInt(GetObjProperty(ticket, "pethp"));
    SetHp(newpet, 3);

    Say("Take care and be sure to feed it!");

    DestroyItem(ticket);
  else
    Say("I have no use for that.");
  endif

endfunction

function stable(who)
	Say("Which pet would you like to Stable");

	var pet := Target (who);

	if( GetObjProperty( pet, "DonatorMount") )
		Say("You cannot stable that!");
		return;
	endif

	if( pet.npctemplate == "donatorhorse")
		Say("You cannot stable that!");
		return;
	elseif( pet.npctemplate == "donatorllama")
		Say("You cannot stable that!");
		return;
	elseif( pet.npctemplate == "donatorostard")
		Say("You cannot stable that!");
		return;
	elseif( pet.npctemplate == "donatorbear")
		Say("You cannot stable that!");
		return;
	endif

	if (pet)
	  var tempdata	:= GetObjProperty(pet, "master");
	  var summoned	:= GetObjProperty(pet, "summoned");
	  var animated	:= GetObjProperty(pet, "animated");
	  var charmed	:= GetObjProperty(pet, "charmed");

	  if ((pet.script == "tamed") and (tempdata == who.serial) and !summoned and !animated and !charmed)
		  var price := GetStrength(pet)*2;
		  Say("I charge " + price + " to take care of " + pet.name + ".");

	    if (who.spendgold(price))
		    Say("Keep this ticket and give it to me when you want " + pet.name + " back.");
		    var ticket := CreateItemInBackpack (who, 0x186E, 1);
    		Save_Pet_Data(ticket, pet);
	    endif

	  elseif ((pet.graphic == CID_HUMAN_MALE) or (pet.graphic == CID_HUMAN_FEMALE))
		  Say("Do I look like an Inn Keeper?!");
	  else
		  Say("I could stable " + pet.name + " but that is not your pet.");
	  endif
  endif
endfunction

function Save_Pet_Data (ticket, pet)

  var tempdata:= pet.npctemplate;

  ticket.name := "Pet claim ticket - Name: " + pet.name + " - " + tempdata;
  ticket.graphic := 5360;

  SetObjProperty(ticket, "petname", pet.name);
  SetObjProperty(ticket, "pethp", GetHP(pet));
  SetObjProperty(ticket, "petmana", GetMana(pet));
  SetObjProperty(ticket, "petcolor", pet.color);

  SetObjProperty(ticket, "pettemplate", tempdata);

  SetObjProperty(pet, "guardkill", 1);
  pet.graphic := 1000;
  ApplyRawDamage(pet, GetMaxHP(pet)+3);

endfunction

///////////////////////////////////////////////////////////////////////////////////
// Toadstool
//
// TrainGump() - Let's make it more user friendly
//
////////////////////////////////////////////////////////////////////////////////////////
function TrainGump(who, skills)

  SetObjProperty(who, "#TrainGump", {GetPid(), ReadGameClock()} );

  var ysize := 120 + (skills.size()*40);

  if (ysize <= 160) // 1
    ysize := ysize + 45;
  elseif (ysize <= 200) // 2
    ysize := ysize + 30;
  elseif (ysize <= 240) // 3
    ysize := ysize + 25;
  endif

  var gump := GFCreateGump( 15, 15, 350, ysize);
  GFResizePic(gump, 15, 15, 3500, 350, ysize);
  GFHTMLArea(gump, 50, 25, 280, 40, "<BASEFONT SIZE=20><CENTER><u>"+me.name+"</u> can train you in the following skills..." , 0,0 );

  GFTextLine(gump, 30, 70, 55, "Skill Name:");
  GFTextLine(gump, 190, 70, 55, "Train Points:");
  GFTextLine(gump, 285, 70, 55, "Train Max:");
  var y := 95;
  var skillamt := 0;
  var skillamtdec := 0;

  foreach skill in skills
    GFTextLine(gump, 30, y, 69, GetAttributeIdBySkillId(skill));
    GFCheckBox(gump, 305, y, 2714, 2715, 0, skill+1000);
    GFTextEntry(gump, 185, y, 25, 20, 0, "0.0", skill+2000);
    skillamt := CDbl(CDbl((GetBaseSKillBaseValue(me, skill)/3.0)/10.0) - CDbl(GetBaseSKillBaseValue(who, skill) / 10.0));
    skillamtdec := CStr(skillamt - CInt(skillamt));
    if (CDbl(skillamtdec) > 0)
      skillamtdec := skillamtdec[2]+""+skillamtdec[3];
    else
      skillamtdec := ".0";
    endif
    GFTextLine(gump, 220, y, 0, "/ "+CInt(skillamt)+""+skillamtdec);
    y := y + 25;
  endforeach

  GFAddbutton(gump, 270, ysize-75, 2128, 2129, 1, 10);
  GFAddbutton(gump, 54, ysize-75, 2119, 2120, 1, 0);

  GFHTMLArea(gump, 46, ysize-50, 290, 60, "<BASEFONT COLOR=DARKGRAY><CENTER>The cost per .1 skill point is 1 gold piece. You can either enter a skill level to train to, or check the box to train as high as you can." , 0,0 );
  var data := GFSendGump(who, gump);

  // Check if 30 secs has passed
  if ( GetObjProperty(who, "#TrainGump")[2]+30 < ReadGameClock() )
    return 0;
  elseif (Distance(me, who) > 10)
    SendSysMessage(who, "You have moved too far away from "+me.name);
    return 0;
  endif

  // Cancel/or gump closed
  if (data[0] != 10)
    return 0;
  endif

  var msgsent := 0;
  var trained := 0;
  var skillgained := 0;

  foreach key in (data.keys)

  // It's train as much as we can. NOTE: This is only here if box is ticked
  if (key > 999 && key < 1999)
    
    skillgained := TrainMax(who, key-1000, trained);

    if (skillgained < 1)
      return 0; // This means player ran out of gold, stop it
    endif

  // It's text entry train. NOTE: This is ALWAYS here, 0.0 is shown if not used
  elseif (key > 1999)
    
    skillgained := TrainEntry(who, key-2000, data, trained);
    
  endif

  if (msgsent == 0 && skillgained)
    say("Let me show you how it's done.");  
    SendSysmessage( who, "Your skill increases." ); // Note increase
    msgsent := 1;
  endif

  skillgained := 0;
  trained := trained + 1;

  endforeach

endfunction

function TrainMax(who, skill, trained)

  var skillamt := GetBaseSKillBaseValue(me, skill)/3 - GetBaseSKillBaseValue(who, skill);

  if (who.spendgold(skillamt))
    SetBaseSkillBaseValue( who, skill, GetBaseSKillBaseValue(who, skill)+skillamt);
  else
    var goldamt := 0;
    // Not enough gold for full skill, try less
    foreach item in EnumerateItemsInContainer(who.backpack)
      if (item.objtype == 0xeed)
        goldamt := goldamt + item.amount;
      endif
    endforeach

    if (goldamt > 1 && goldamt <= skillamt)
      if (who.spendgold(goldamt))
        SetBaseSkillBaseValue( who, skill, GetBaseSKillBaseValue(who, skill)+goldamt);
      else
        return 0; // SHOULD never hit here
      endif
    elseif (!goldamt && trained > 0)
      Say("You don't have enough gold to train anymore");
      return 0;
    elseif (!goldamt)
      Say("You don't have enough gold!");
      return 0;
    else
      return 0;
      //broadcast("woah copernicus! Check the vendors skill training!", 3, 53);
    endif
  endif

  return 1;

endfunction

function TrainEntry(who, skill, data, trained)
              trained := trained;
  // lols, add 2000 again
  var skillamt := CDbl(GFExtractData(data, skill+2000));

  var maxskillamt := CDbl(GetBaseSKillBaseValue(me, skill)/3 - GetBaseSKillBaseValue(who, skill))/10;
  if (skillamt > maxskillamt)
    skillamt := maxskillamt;
  endif

  // players didn't enter skill
  if (skillamt < 1)
    return 0;
  endif

  if (who.spendgold(CInt(skillamt*10)))
    SetBaseSkillBaseValue( who, skill, GetBaseSKillBaseValue(who, skill)+skillamt*10);
    return 1;
  else
    Say("You don't have enough gold to train.");
  endif

  return 0;
	
endfunction
