/////////////////////////////////////////////////////////////////////////////
//
// Simple Townperson AI. responds to a few keywords and barks out
// some crappy responses
//
// He also runs like heck if you try to attack him :)
//
// TODO: put all keyword / response text in a cfg file.
//
/////////////////////////////////////////////////////////////////////////////

use npc;
use os;
use uo;

var  cfg;

include "include/eventid";
include "include/randname";
include "include/speech";
include "include/objtype";
include "include/anchors";

include "ai/main/loot";
include "include/npcbackpacks";
include "ai/setup/modsetup";
include "include/random";
include "include/attributes";

const HALT_THRESHOLD := 1; // how close before he barks?

var me := Self();

if( me.name["<random> the Peasant"] )
    SetName ( me , RandomName( me ) );
elseif( me.name["<random>"] )
    //SetName ( me , RandomName( me ) );
    var title := Random(10);
    var ttitle := "";

    case (title) 
            0: ttitle := "";
            1: ttitle := " the townsperson";
            2: ttitle := " the farmer";
            3: ttitle := " the sailor";
            4: ttitle := " the drunkard";
            5: ttitle := " the wanderer";
            6: ttitle := " the villager";
            7: ttitle := " the gypsie";
            8: ttitle := " the vagabond";
            9: ttitle := " the laborer";
            default: ttitle := "";
    endcase
    var tname := randomname(me);
    setname(me, tname + ttitle);
endif

var style := Random(20);;
case (style) 
    0: style := "mage";
    1: style := "warrior";
    2: style := "rich";
    3: style := "poor";
    4: style := "poor";
    5: style := "zulu2";
    6: style := "zulu3";
    7: style := "zulu";
    8: style := "fisherman";
    9: style := "farmer";
    10: style := "merchant";
    11: style := "AnimalTrainer";
    12: style := "barber";
    13: style := "innstaff";
    14: style := "Clothes";
    15: style := "ranger";
    16: style := "Gardener";
    17: style := "Blacksmith";
    18: style := "Tailor";
    19: style := "LeatherWorker";
    default: style := "poor";
endcase

var parms := {};
parms[1]:= me;
parms[2]:= style;
set_priority( 1 );
EquipFromTemplate( me , style );

program CastleGuard()

    drop_anchor(me);
	SetObjProperty(me,"serial",me.serial);
    SetObjProperty(me, "noloot", 1);

    EnableEvents( SYSEVENT_SPEECH + SYSEVENT_ENGAGED + SYSEVENT_DISENGAGED + SYSEVENT_DAMAGED, HALT_THRESHOLD);
    EnableEvents( SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA, HALT_THRESHOLD );
    EnableEvents( SYSEVENT_OPPONENT_MOVED );

	if (getobjproperty(me, "frozen"))
		me.frozen := 1;
	endif

    SetWarMode( 0 );
    set_priority(10);

    var ev;
    var looter := GetObjProperty( me, "looter" );
    var next_wander := ReadGameClock() + 30;
    while (1)
        wander();
        ev := os::wait_for_event( 120 );
        // print( "event type: " + ev.type );
        case (ev.type)
            SYSEVENT_SPEECH:
                var tspeech := process_text(ev.text, "default", "default");
                if (tspeech)
                    say(tspeech);
                endif
                
            SYSEVENT_ENGAGED:
                say("Aaahhh! Help! Help!  I'm being oppressed!");
                Run( ev.source );

            SYSEVENT_DAMAGED:
                say( "By the virtues! Why? WHY??" );
                //print( "I just took " + ev.damage + " points of damage!" );
                if (ev.source)
                    Run( ev.source );
                else
                    say( "What sinister force is this!" );
                endif
        default: wander();

        endcase
        if (ReadGameClock() >= next_wander)
            wander();
            if (looter)
                grabloot();
            endif
            next_wander := ReadGameClock() + 30;
        endif
        
        // TODO: ReturnToPost();
    endwhile

endprogram


function Run( opponent )
    TurnAwayFrom( opponent );

    DisableEvents( SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA );
    //SetOpponent( opponent );

    var waittime;
  outer:
    while (opponent and !opponent.dead)
        waittime := OpenDistance( opponent ) * 15;

        var ev := wait_for_event( waittime );
        // print( "event type: " + ev.type );
        case (ev.type)
            SYSEVENT_SPEECH:
            
            SYSEVENT_DISENGAGED:
                if (ev.source.serial == opponent.serial)
                    say( "Whew!" );
                    break outer;
                endif

            SYSEVENT_ENGAGED:
            SYSEVENT_DAMAGED:
                if (ev.source)
                    if (ev.source.serial != opponent.serial)
                        say( "Ack! Leave me alone!" );
                    else
                        if (ev.type == "damage")
			    say("Ouch! Heeelp!");
                            //print( "I just took " + ev.damage + " points of damage." );
                        endif
                    endif
                endif

            SYSEVENT_OPPONENT_MOVED:
                
                
            SYSEVENT_ENTEREDAREA:
            SYSEVENT_LEFTAREA:
                // ignore both of these
        endcase
    endwhile

    EnableEvents( SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA, HALT_THRESHOLD );
    SetWarMode( 0 );
endfunction


/////////////////////////////////////////////////////////////////////////////
//
//  OpenDistance - open the distance between self and an opponent.
//  Returns: 1 if distance is 10 (no move necessary)
//           0 if distance is < 10 (may still need to move)
//
/////////////////////////////////////////////////////////////////////////////
function OpenDistance( opponent )
    case (Distance( me, opponent ))
        10:
            return 1;
        
        default:
            RunAwayFrom( opponent );
            return 0;
    endcase
endfunction