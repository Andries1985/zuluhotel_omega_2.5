use os;
use uo;

include "include/eventid";
include "include/randname";
include "include/utility";
include "include/mrcspawn";
include "include/speech";
include "include/client";
include "include/vetement";
include "include/npcbackpacks";
include "ai/setup/modsetup";
include "include/anchors";
include "ai/main/loot";

const HALT_THRESHOLD := 8; // how close before he barks?

var me := Self();

program noble ()

	var me := Self();

	drop_anchor(me);

	SetObjProperty(me,"serial",me.serial);

    
    EnableEvents( SYSEVENT_SPEECH + SYSEVENT_ENGAGED + SYSEVENT_DISENGAGED + SYSEVENT_DAMAGED, HALT_THRESHOLD);
    EnableEvents( SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA, HALT_THRESHOLD );
    EnableEvents( SYSEVENT_OPPONENT_MOVED );

	if (getobjproperty(me, "frozen"))
		me.frozen := 1;
	endif

    SetWarMode( 0 );
    set_priority(10);
	if( me.name["<random>"] )
		if (me.gender == 0)
			Habille( me , "noblemale" );
		else
			Habille( me , "noblefemale" );
		endif
		SetName ( me , RandomName( me ) );
	endif

	var ev;
    var looter := GetObjProperty( me, "looter" );
	var next_wander := ReadGameClock() + 60;
    while (1)
        wander();
        ev := os::wait_for_event( 120 );
        // print( "event type: " + ev.type );
        case (ev.type)
            SYSEVENT_SPEECH:
               var tspeech := process_text(ev.text, "default","default");
               if (tspeech)
                        say(tspeech);
               endif
                
            SYSEVENT_ENGAGED:
				say("Aaahhh! Help! Help!  I'm being oppressed!");
                Run( ev.source );

            SYSEVENT_DAMAGED:
                say( "By the virtues! Why? WHY??" );
                //print( "I just took " + ev.damage + " points of damage!" );
                if (ev.source)
                    Run( ev.source );
                else
                    say( "What sinister force is this!" );
                endif
           default: wander();

        endcase
        if (ReadGameClock() >= next_wander)
            wander();
			if (looter)
				grabloot();
			endif
            next_wander := ReadGameClock() + 60;
        endif
        
        // TODO: ReturnToPost();
    endwhile

endprogram

function Run( opponent )
    TurnAwayFrom( opponent );

    DisableEvents( SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA );
    //SetOpponent( opponent );

    var waittime;
  	outer:
		while (opponent and !opponent.dead)
			waittime := OpenDistance( opponent ) * 15;

			var ev := wait_for_event( waittime );
			// print( "event type: " + ev.type );
			case (ev.type)
				SYSEVENT_SPEECH:
				
				SYSEVENT_DISENGAGED:
					if (ev.source.serial == opponent.serial)
						say( "Whew!" );
						break outer;
					endif

				SYSEVENT_ENGAGED:
				SYSEVENT_DAMAGED:
					if (ev.source)
						if (ev.source.serial != opponent.serial)
							say( "Ack! Leave me alone!" );
						else
							if (ev.type == "damage")
					say("Ouch! Heeelp!");
								//print( "I just took " + ev.damage + " points of damage." );
							endif
						endif
					endif

				SYSEVENT_OPPONENT_MOVED:
					
					
				SYSEVENT_ENTEREDAREA:
				SYSEVENT_LEFTAREA:
					// ignore both of these
			endcase
		endwhile

    EnableEvents( SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA, HALT_THRESHOLD );
    SetWarMode( 0 );
endfunction


/////////////////////////////////////////////////////////////////////////////
//
//  OpenDistance - open the distance between self and an opponent.
//  Returns: 1 if distance is 10 (no move necessary)
//           0 if distance is < 10 (may still need to move)
//
/////////////////////////////////////////////////////////////////////////////
function OpenDistance( opponent )
    case (Distance( me, opponent ))
        10:
            return 1;
        default:
            RunAwayFrom( opponent );
            return 0;
    endcase
endfunction