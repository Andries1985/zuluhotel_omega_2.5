//////////////////////////////////////////////////////////////////////////////////////////
//											
//	trielementalscript :								
//											
//	Make the special weapon to ramdomly cast a lightning on the defender.		
//	The % of chance that lightning will be cast is included in the itemdesc.	
//	The lightning follow the normal spell damages and use the wielder magery	
//	and eval int to determine it.								
//											
//////////////////////////////////////////////////////////////////////////////////////////

use uo;

include "include/spelldata";
include ":combat:hitscriptinc";
include "include/random";
include "include/areas";
include "include/client";

program trielementalscript(attacker, defender, weapon, armor, basedamage, rawdamage)
    
    if (lower(TypeOf(attacker)) == "array")
        defender 	:= attacker[2];
        weapon 	:= attacker[3];
        armor 	:= attacker[4];
        basedamage := attacker[5];
        rawdamage	:= attacker[6];
        attacker 	:= attacker[1];
    endif

	// Check if attacker is already casting something.
    var is_casting := GetObjProperty(attacker, "#Casting");
	if(is_casting)
		SendSysMessage( attacker, "Spellstrike failed! You are already casting something!");
		return 0;
	endif
    
    rawdamage := RecalcDmg( attacker , defender , weapon , armor , basedamage );
    
    var chance := GetObjProperty(weapon, "ChanceOfEffect");
    var spelldmg := 0;
    if(RandomDiceStr("1d100") <= chance)
    
        var targ;
        if( GetObjProperty( weapon , "Cursed" ) )
            targ := attacker;
        else
            targ := defender;
        endif

        var spelldmg := (CalcSpellDamage( attacker, targ , 5 )*0.5);
        spelldmg := Resisted( attacker , targ , 8 , spelldmg );

        // 30% dmg nerf for mages, Paladins and Mystic Archers
        if(GetObjProperty( attacker , CLASSEID_MAGE) || GetObjProperty( attacker , CLASSEID_PALADIN) || GetObjProperty( attacker , CLASSEID_MYSTIC_ARCHER))
            spelldmg *= 0.8;
        endif

        PlayMovingEffect( attacker , targ , FX_SPELL_FIREBALL , 5 , 1 );
        PlaySoundEffect( attacker , SFX_SPELL_FIREBALL );
        ApplyElementalDamage( targ , defender ,1, spelldmg , DMGID_FIRE );
        //PrintTextAbovePrivate( attacker , "I'm dealing this much spell damage: " +spelldmg, attacker );
        Sleepms( 250 );

        PlayLightningBoltEffect( targ );
        PlaySoundEffect( targ , SFX_SPELL_LIGHTNING );
        ApplyElementalDamage( targ , defender ,1, spelldmg , DMGID_AIR );
        //PrintTextAbovePrivate( attacker , "I'm dealing this much spell damage: " +spelldmg, attacker );
        Sleepms( 250 );

        PlaySoundEffect( targ , SFX_SPELL_ICE_STRIKE1);
        PlayStationaryEffect( targ.x , targ.y , targ.z , 0x3789, speed:=30, loop:=30);
        PlaySoundEffect( targ , SFX_SPELL_ICE_STRIKE2);
        ApplyElementalDamage( targ , defender ,1, spelldmg , DMGID_WATER );
        //PrintTextAbovePrivate( attacker , "I'm dealing this much spell damage: " +spelldmg, attacker );
        Sleepms( 250 );

        if(DEBUG_MODE)
            PrintTextAbovePrivate( attacker , "I'm dealing this much spell damage: " +spelldmg, attacker );
        endif
    endif

    if(DEBUG_MODE)
        PrintTextAbovePrivate( attacker , "I'm dealing this much physical damage: " +rawdamage, attacker );
    endif

    DealDamage( attacker , defender , weapon , armor , basedamage , rawdamage );

endprogram
