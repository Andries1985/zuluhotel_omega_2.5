use uo;
use os;
use util;

include ":combat:hitscriptinc";
include "include/attributes";
include "include/client";
include "include/dismount";
include "include/itemutil";

program explosionlauncherscript(attacker, defender, weapon, armor, basedamage, rawdamage)
	
	if (TypeOf(attacker) == "Array")
	//required for archery sys hook handling
		var temparr := attacker;	
		attacker := temparr[1];
		defender := temparr[2];
		weapon := temparr[3];
		armor := temparr[4];
		basedamage := temparr[5];
		rawdamage := temparr[6];
	endif
	
	var defenderpos := struct;
	defenderpos.+x:=defender.x;
	defenderpos.+y:=defender.y;
	defenderpos.+z:=defender.z;
	
	var potion;
	var expotions := {0xdc08, 0xdc09, 0xdc07, 0xff2f, 0xff30, 0xff31, 0xff32, 0xff33, 0xff34, 0xff35, 0xff36};
	var mypack := EnumerateItemsInContainer( attacker.backpack );
	foreach item in mypack
		if( item.objtype in expotions )
			potion:=CreateItemInContainer(attacker.backpack, item.objtype); //potion was used by crossbow so need to fake one... hopefully this is as good as other on
			DupeItem( item, potion ); //uses found potions props
			break;
		endif
	endforeach
	
	if (!potion)
		//means that attack used it before it could get here...
		potion:=CreateItemInContainer(attacker.backpack, GetObjProperty(attacker, "#LastExplosionShot")); //last one will be pretty dud-like
	endif
	
	
	var parms := {};
	parms[1] := attacker;
	parms[2] := potion;
	parms[3] := defenderpos;

	if (GetObjProperty(attacker.weapon, "#Activated") && attacker.weapon.objtype == 0xda15)
		EraseObjProperty(attacker.weapon, "#Activated");
		attacker.weapon.color := GetObjProperty(attacker.weapon, "EnchantColor");
		start_script( ":GMItems:cains_exploder", parms );	
	else
		start_script( ":alchemy:exploder", parms );		
	endif
	
	DealDamage( attacker, defender, weapon, armor, basedamage, rawdamage );
endprogram
