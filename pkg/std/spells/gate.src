use os;
use uo;

include "include/objtype";
include "include/spelldata";
include "include/areas";
include "include/client";
include ":housing:utility";
include ":statichousing:recallgatehelp";
include "include/attributes";

program spell_gate( caster, spell_id )

	var circle := 7;
	
		// For scrolls, StartSpellScript isn't working >:(
		if (TypeOf(caster) == "Array")
					spell_id := caster[2];
			caster := caster[1];
		endif

	if( IsForbiddenAreaToGateFrom( caster ) )
		SendSysMessage( caster, "You can't gate from there." );
		return 0;
	endif


	var antigate := ListItemsNearLocation(caster.x, caster.y, caster.z, 10, caster.realm);
	foreach item in antigate
		if (item.objtype == 0xa3c9)
			SendSysMessage( caster, "You can't gate from here." );
			return;
		endif
	endforeach
	
	var multi := GetStandingHeight( caster.x, caster.y, caster.z, caster.realm ).multi;
	if( multi )
		if( !Iscowner( caster, multi )  )
			if( !IsFriend( caster, multi, GATE_FROM) )
				SendSysMessage( caster, "You can't gate from this house." );
				return;
			endif
		endif
	endif
	// Same check as above for static houses
	var serialstatichouse := StaticHouseSerial( caster );
	if(serialstatichouse)
		var sign := SystemFindObjectBySerial(serialstatichouse);
		if( !Iscowner( caster, sign )  )
			if( !IsFriend( caster, sign, GATE_FROM) )
				SendSysMessage( caster, "You can't gate from this house." );
				return;
			endif
		endif
	endif

	
	if (TryToCast( caster, spell_id ) != SUCCESS);
		EraseObjProperty(caster, "#Casting");
		return 0;
	endif
	SendSysmessage( caster, "Select a rune to gate from." );
	var cast_on := CanTargetThing(caster, circle, TGTOPT_CHECK_LOS );
	if (!cast_on)
		return;
	elseif( !Accessible( caster, cast_on ) )
		SendSysMessage( caster, "You can't reach that." );
		return 0;
	elseif( cast_on.objtype != UOBJ_RUNE && cast_on.objtype != 0x6100 )
		SendSysmessage( caster, "You can only cast that on a recall rune or a runebook!" );
		return 0;
	elseif( !ReserveItem( cast_on ) )
		return 0;
	endif
	
	var tox := Cint(GetObjProperty( cast_on, "x" ));
	var toy := Cint(GetObjProperty( cast_on, "y" ));
	var toz := Cint(GetObjProperty( cast_on, "z" ));
	var torealm := GetObjProperty( cast_on, "realm" );

	if( !tox and !toy and !toz and !torealm )
		SendSysmessage(caster, "That is a blank rune!");
		return;
	endif

	if( IsForbiddenAreaToGateTo( caster, tox, toy ) )
		SendSysMessage(caster, "The destination is a magic place with protection.");
		if( cast_on.objtype != 0x6100 )
			DestroyItem( cast_on );
		endif
		return;
	endif
	var owner;
	var lamp;
	var Near_Items := ListItemsNearLocation(tox, toy, toz, 10, torealm);
	foreach thing in Near_Items
		if (thing.objtype == 0xf156)
			lamp := thing;
			owner := GetObjProperty(lamp,"Owner");
		endif
	endforeach
	if (lamp and owner)
		if (caster.serial != owner)
			SendSysMessage( caster, "You can't gate to this house." );
			return;
		endif
	endif

	var antigate2 := ListItemsNearLocation(tox, toy, toz, 10, torealm);
	foreach item in antigate2
		if (item.objtype == 0xa3c9)
			SendSysMessage( caster, "You can't gate there." );
			return;
		endif
	endforeach
	multi := GetStandingHeight( tox, toy, toz, torealm ).multi;
	if( multi )
		if( !Iscowner( caster, multi )  )
			if( !IsFriend( caster, multi, GATE_TO) )
				SendSysMessage( caster, "You can't gate to this house." );
				return;
			endif
		endif
	endif

	//Same check as above but for static houses
	serialstatichouse := StaticHouseSerialAtLocation( tox, toy, toz );
	if(serialstatichouse)
		var sign := SystemFindObjectBySerial(serialstatichouse);
		if( !Iscowner( caster, sign )  )
			if( !IsFriend( caster, sign, GATE_FROM) )
				SendSysMessage( caster, "You can't gate to this house." );
				return;
			endif
		endif
	endif
	
	set_critical(1);
	
	if( !caster )
		return;
	endif
	
	var gate1 := CreateItemAtLocation( caster.x, caster.y, caster.z, 0x99b1, 1, caster.realm );
	var gate2 := CreateItemAtLocation( tox, toy, toz, 0x99b1, 1, torealm );	
	if( !gate1 || !gate2 || !caster )
		DestroyItem(gate1);
		DestroyItem(gate2);
        	return;
	endif
	
	SetObjProperty( gate1, "GateDestX", gate2.x );
	SetObjProperty( gate1, "GateDestY", gate2.y );
	SetObjProperty( gate1, "GateDestZ", gate2.z );
	SetObjProperty( gate1, "GateDestRealm", gate2.realm );
	SetObjProperty( gate2, "GateDestX", gate1.x );
	SetObjProperty( gate2, "GateDestY", gate1.y );
	SetObjProperty( gate2, "GateDestZ", gate1.z );
	SetObjProperty( gate2, "GateDestRealm", gate1.realm );

	ReleaseItem(cast_on);
	Detach();

	set_critical(0);

	PlaySoundEffect( caster, SFX_SPELL_GATE_TRAVEL );

	sleep(30);
    
	set_critical(1);
	DestroyItem(gate1);
	DestroyItem(gate2);
	set_critical(0);

endprogram
