use uo;

include "include/spelldata";
include "include/client";
include "include/attributes";
include ":housing:utility";
var water := { 0xA8, 0xA9, 0x64, 0xAA, 0xAB };

program cast_teleport( parms, spell_id )

	var circle := 3;
	var caster;
	var where;
	var BX;
	var BY;
	var BZ;
	var fromhit;
	var castfromfish;
	
	if (parms[1] == "#MOB")
		caster := parms[2];
		where := parms[3];

		if (parms[4])
			circle := parms[4];
		endif

		if (parms[5])
			fromhit := parms[5];
		endif
	else
		caster := parms;
		// For scrolls, StartSpellScript isn't working >:(
		if (TypeOf(parms) == "Array")
			caster := parms[1];
			spell_id := parms[2];
		endif

		if (parms[3] != "fish")
			if (IsMysticArcher(caster))
				SendSysMessage(caster, "Mystic Archers may only use fish to teleport!");
				EraseObjProperty(caster, "#Casting");
				return 0;
			endif
		endif
			
		endif

		if (TryToCast( caster, spell_id ) != SUCCESS);
			EraseObjProperty(caster, "#Casting");
			return 0;
		endif

		where := CanTargetArea(caster, circle);
		if (!where)
			return;
		endif
	endif
	
	Bx:=caster.x;
	By:=caster.y;
	Bz:=caster.z;
	var standing := where.z;

	var diff := Bz - standing;
	if(diff > 19 && !caster.IsA(POLCLASS_NPC))
		SendSysmessage( caster, "You cannot teleport from this height." );
		return;
	endif

	if(GetObjProperty( caster, "bmPlayer" ))
		return;
	endif

	var multi := GetStandingHeight( caster.x, caster.y, caster.z, caster.realm ).multi;
	if( multi )
		return;
	endif

	foreach item in ListItemsNearLocation( cint(where.x), cint(where.y), cint(where.z), 4, caster.realm );
		if( (item.objtype == 61457 or item.objtype == 61458) and
		  (GetMapInfo( where.x, where.y, where.realm ).landtile in water) )
			SendSysmessage( caster, "You cannot teleport there." );
			return;
		endif
	endforeach

	var Near_Items;
	var ok := 1;
	Near_Items := ListItemsNearLocation( where.x, where.y, where.z, 10, caster.realm );
	foreach thing in Near_Items
		if (thing.objtype == 0xf156 || thing.objtype == 0xa3c7)
			ok := 0;
		endif
	endforeach

	multi := GetStandingHeight( where.x, where.y, where.z, caster.realm ).multi;
	if( multi )
		return;
	endif
	
	var canstand := 0;
	var Moveland := GetStandingLayers(cint(where.x), cint(where.y), MAPDATA_FLAG_MOVELAND, caster.realm );
	
	if (DEBUG_MODE)
		SendSysmessage( caster, "Where Z: "+where.z, color:=  38);
		SendSysmessage( caster, "Moveland: "+Moveland, color:=  53);
	endif
	foreach layer in Moveland
		var standlayer := layer.height + layer.z;
		if (DEBUG_MODE)
			SendSysmessage( caster, "layer height:"+layer.height, 48);
			SendSysmessage( caster, "layer height:"+layer.z, 48);
			SendSysmessage( caster, "standlayer: "+standlayer, color:= 49);
		endif
		if (where.z <= standlayer)
			canstand := 1;
		endif
	endforeach
	if (!canstand)
		SendSysmessage( caster, "You can't stand there.", color:= 33 );
		if (!DEBUG_MODE)
			return;
		endif
	endif
	
	var sx := caster.x, sy := caster.y, sz := caster.z, sr := caster.realm;
	if (ok == 1)
		MoveObjectToLocation( caster, cint(where.x), cint(where.y), cint(where.z), caster.realm );
		PlayStationaryEffect( sx, sy, sz, FX_SPELL_TELEPORT, SPEED_SPELL_TELEPORT, LOOP_SPELL_TELEPORT, 0 , sr );
		PlayStationaryEffect( caster.x, caster.y, caster.z, FX_SPELL_TELEPORT, SPEED_SPELL_TELEPORT, LOOP_SPELL_TELEPORT, 0 , caster.realm );
		PlaySoundEffect( caster, SFX_SPELL_TELEPORT );
	endif
	If (Caster.multi)
		MoveObjectToLocation( caster, bx, by, bz, caster.realm, 1 );
	endif	

endprogram