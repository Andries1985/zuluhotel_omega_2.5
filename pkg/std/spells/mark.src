use uo;

include "include/objtype";
include "include/spelldata";
include "include/areas";
include "include/client";
include ":housing:utility";
include ":statichousing:recallgatehelp";

program cast_mark( caster, spell_id )

	var circle := 6;
		// For scrolls, StartSpellScript isn't working >:(
		if (TypeOf(caster) == "Array")
			spell_id := caster[2];
			caster := caster[1];
		endif
	if( IsForbiddenAreaToMark( caster ) )
		SendSysMessage( caster, "You can't mark a rune here." );
		return 0;
	endif

	var Near_Items := ListItemsNearLocation(caster.x, caster.y, caster.z, 10, caster.realm);
	foreach thing in Near_Items
		if (thing.objtype == 0xa3c7)
			SendSysMessage( caster, "You can't mark a rune here." );
			return 0;
		endif
	endforeach

	var multi := caster.multi;
	if( multi )
		if( !Iscowner( caster, multi ) )
			if( !IsFriend( caster, multi, GATE_TO ) )
				SendSysMessage( caster , "You can't mark there!" );
				return;
			endif
		endif
	endif
	// Same check as above for static houses
	var serialstatichouse := StaticHouseSerial( caster );
	if(serialstatichouse)
		var sign := SystemFindObjectBySerial(serialstatichouse);
		if( !Iscowner( caster, sign )  )
			if( !IsFriend( caster, sign, GATE_TO ));
				SendSysMessage( caster, "You can't mark there!" );
				return;
			endif
		endif
	endif
	
	if (TryToCast( caster, spell_id ) != SUCCESS);
		EraseObjProperty(caster, "#Casting");
		return 0;
	endif
	SendSysmessage( caster, "Select a rune to mark." );
	var cast_on := CanTargetThing(caster, circle, TGTOPT_CHECK_LOS );

	if( !cast_on )
		return 0;
	elseif( !Accessible( caster, cast_on ) )
		SendSysMessage( caster, "You can't reach that." );
		return 0;
	elseif( cast_on.objtype != 0x1f17 && cast_on.objtype != 0x1f14 )
		SendSysmessage(caster, "You can only mark recall runes!");
		return 0;
	elseif( !ReserveItem( cast_on ) )
		return 0;
	endif

	PlayObjectCenteredEffect(  caster, FX_SPELL_MARK, SPEED_SPELL_MARK, LOOP_SPELL_MARK);
	PlaySoundEffect( caster, SFX_SPELL_MARK );

	var cast_on2;

	Print($"Cast_on: {cast_on} / o.r: {cast_on.realm}  cast_on.x: {cast_on.x} cast_ony: {cast_on.y} cast_on.z: {cast_on.z}");
	if (cast_on.container)
		cast_on2 := CreateItemInContainer(cast_on.container, 0x1f14, 1);
	else
		cast_on2 := CreateItemAtLocation(cast_on.x, cast_on.y, cast_on.z, 0x1f14, 1, cast_on.realm);
	endif

	SubtractAmount(cast_on, 1);	
		
	SetObjProperty(cast_on2, "x", caster.x);
	SetObjProperty(cast_on2, "y", caster.y);
	SetObjProperty(cast_on2, "z", caster.z);
	SetObjProperty(cast_on2, "realm", caster.realm);
	
	Print($"Cast_o2n: {cast_on2} / o.r: {cast_on2.realm}  cast_on.x: {cast_on2.x} cast_ony: {cast_on2.y} cast_on.z: {cast_on2.z}");

	SetName(cast_on2, "a marked recall rune");

	if (caster.cmdlevel > 1)
		SetObjProperty(cast_on,"LFucker",caster.name);
	endif
 endprogram