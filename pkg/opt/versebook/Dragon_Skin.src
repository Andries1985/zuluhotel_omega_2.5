use uo;
use os;

include "include/attributes";
include "include/classes";
include ":versebook:include/versefunctions";
include ":versebook:include/verseconstants";

var total_protected := {};

var stamina, diff, skills, element, instrument, musicianship, name;
var BASE_PROT := 1;

// How many seconds between draining stamina
var PROT_LOOP := 3;

const GFX_EFFECT := 14186;
const GFX_COLOUR :=  1300;
const SOUND_EFFECT := 0x232;

program Dragon_Skin(parms)

	// Sent with the song_id (a number like spellid)
	var who := parms[1];
	var song_id := parms[2];

	Attach(who);

	// Checks rules for playing the particular song, class, stamina skills, instrunment
	// Returns cfg info for song to save processing power
	var can_play := CanPlay(who, song_id);
	if (!can_play)
		return 0;
	else
		stamina := can_play[1];
		diff := can_play[2];
		skills := can_play[3];		 // array of skill_ids to base verse on
		element := can_play[4];		 // array of elements to base damage on
		instrument := can_play[5];	 // Item ref to music instrument found
		musicianship := can_play[6]; // The players music SKILL level
		name := can_play[7];		 // The name of the song
	endif

	// Atm we don't allow bards to move, if they lose hp, stop
	var x := who.x;
	var y := who.y;
	var hp := GetHP(who);

	var last_played := ReadGameClock(); // Used JUST for the playing sound, does a check against music skill too

	// All skill checks are done in here
	if (!SucceedPlayingVerse(who, skills, diff, instrument, name))
		return 0;
	endif

	// Calculate the range, damage, and specify the loop var, as well as hit var
	var range := GetVerseRange(who, musicianship);
	var protamt := BASE_PROT * IsBard(who); // simple, bards get +1 per level - no need for a formula anywhere
	var i := PROT_LOOP;
	var hit;
	var protected := {};

	// ------------- The looping main effect of the song ------------ \\
	repeat

		// Only play the sound effect every 7 seconds, as the song is 6.2 secs long. This is skipped the first time
		if (ReadGameClock() >= last_played)
			if (!PlayBardicMusic(who, diff, instrument))
				return 0;
			endif
			last_played := ReadGameClock()+7;
		endif

		// set hit to 0 again
		hit := 0;
		if ( i == PROT_LOOP)

			// empty the protected array since we're filling it again here anyway...
			protected := {};
			foreach person in (ListMobilesInLineOfSight( who, range )+who)
				// ONLY hit guildies or parties and if they arnt full hp
				if (SmartSongBoost(who, person) && CheckLineOfSight( who, person ) )
					hit := 1;
					if (ConsumeBardStamina(who, stamina, 1))
						PlayObjectCenteredEffectEx( person, GFX_EFFECT, 8, 50, GFX_COLOUR);
						PlaySoundEffect(person, SOUND_EFFECT);
						if (DragonSkin(person, protamt))
							protected.append(person);
						endif
					else
						break;
					endif
				endif
			endforeach
			i := 0;
			
			// No-one was hit, use half stamina
			if (hit == 0)
				ConsumeBardStamina(who, stamina, 0);
			endif
			
		endif

		
		i := i + 1;
		
		sleep(1);

		// check if an existing protected person is dead/gone out of range, or hiding
		foreach person in protected
			if (Distance(person, who) > range || person.dead || person.hidden)
				protected.erase(_person_iter);
				RemoveDragonSkin(person, protamt);
			endif
		endforeach
		
	until ( InterruptedPlaying(who, x, y, stamina, hp) );

	foreach person in total_protected
		RemoveDragonSkin(person, protamt);
	endforeach
	
endprogram



function DragonSkin(person, protamt)

	if (GetObjProperty(person, "#DragonSkin"))
		return 0;
	endif

	if (person in total_protected)
	else
		total_protected.append(person);
	endif

	SetObjProperty(person, "#DragonSkin", protamt);

	var currlvl := GetObjProperty(person, "PhysicalProtection");
	SetObjProperty(person, "PhysicalProtection", protamt+CInt(currlvl));

endfunction



function RemoveDragonSkin(person, protamt)

	if (!GetObjProperty(person, "#DragonSkin"))
		return 0;
	endif

	var currlvl := GetObjProperty(person, "PhysicalProtection");

	if (CInt(currlvl) - protamt < 1)
		EraseObjProperty(person, "PhysicalProtection");
	else
		SetObjProperty(person, "PhysicalProtection", CInt(currlvl)-protamt);
	endif

	EraseObjProperty(person, "#DragonSkin");

endfunction