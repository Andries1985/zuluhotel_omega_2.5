use uo;
use os;

include "include/attributes";
include "include/classes";
include ":versebook:include/versefunctions";
include ":versebook:include/verseconstants";

var stamina, diff, skills, element, instrument, musicianship, name;

// How many seconds between balancing
var BALANCE_LOOP := 1;

const GFX_EFFECT := 14068;
const GFX_COLOUR := 1457;
const SOUND_EFFECT := 0x37A;

program Life_Balance(parms)

	// Sent with the song_id (a number like spellid)
	var who := parms[1];
	var song_id := parms[2];

	Attach(who);

	// Checks rules for playing the particular song, class, stamina skills, instrunment
	// Returns cfg info for song to save processing power
	var can_play := CanPlay(who, song_id);
	if (!can_play)
		return 0;
	else
		stamina := can_play[1];
		diff := can_play[2];
		skills := can_play[3];		 // array of skill_ids to base verse on
		element := can_play[4];		 // array of elements to base damage on
		instrument := can_play[5];	 // Item ref to music instrument found
		musicianship := can_play[6]; // The players music SKILL level
		name := can_play[7];		 // The name of the song
	endif

	// Atm we don't allow bards to move, if they lose hp, stop
	var x := who.x;
	var y := who.y;
	var hp := 0;

	var last_played := ReadGameClock(); // Used JUST for the playing sound, does a check against music skill too

	// All skill checks are done in here
	if (!SucceedPlayingVerse(who, skills, diff, instrument, name))
		return 0;
	endif

	// Calculate the range, damage, and specify the loop var, as well as hit var
	var range := GetVerseRange(who, musicianship);
	var i := BALANCE_LOOP;
	var balanced;
	var targets := {};

	// ------------- The looping main effect of the song ------------ \\
	repeat

		// Only play the sound effect every 7 seconds, as the song is 6.2 secs long. This is skipped the first time
		if (ReadGameClock() >= last_played)
			if (!PlayBardicMusic(who, diff, instrument))
				return 0;
			endif
			last_played := ReadGameClock()+7;
		endif

		// set hit to 0 again
		balanced := 0;
		targets := {};
		if ( i == BALANCE_LOOP)
			foreach person in (ListMobilesInLineOfSight( who, range )+who)
				// ONLY hit guildies or parties and if they arnt full hp
				if (SmartSongBoost(who, person))
					targets.append(person);
				endif
			endforeach
			i := 0;
			
			balanced := BalanceHealth(who,targets);
			
			// No-one was hit, use half stamina
			if (!balanced)
				ConsumeBardStamina(who, stamina, 0);
			else
				if (!ConsumeBardStamina(who, stamina, 1))
					break;
				endif
			endif
			
		endif

		i := i + 1;
		
		sleep(1);

	until ( InterruptedPlaying(who, x, y, stamina, hp) );

endprogram

function BalanceHealth(who, targets)
	// Less than 2 people, don't balance
	if (targets.size() < 2)
		return 0;
	endif

	// add up all the damage incurred
	var missing_hp := 0;
	foreach person in targets
		missing_hp += (GetMaxHP(person)-GetHP(person));
	endforeach

	// if everyone is full HP there's nothing to balance
	if (!missing_hp)
		return 0;
	endif

	// redistribute all the damage
	var hp_change := CInt(missing_hp/targets.size());
	var last_person;
	var balanced := 0;
	foreach person in targets
		PlayMovingEffectEx( last_person, person,GFX_EFFECT, 6, 10,  GFX_COLOUR );
		last_person := person;
		PlaySoundEffect(person, SOUND_EFFECT);
		var start_hp := GetHP(person);
		SetHP(person, (GetMaxHP(person)-hp_change));
		if (start_hp != GetHP(person))
			balanced := 1;
		endif
		sleepms(100);
	endforeach

	return balanced;

endfunction