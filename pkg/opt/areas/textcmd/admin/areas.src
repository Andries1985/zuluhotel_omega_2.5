///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Toadstool
//
// Areas() - A new, single command to view and alter area properties. No looting/guarded
//
// This is usefull for changing things on the fly. However if you want to have an area that can
// set things (like invuln (safe zone) etc) via enter and exit script. You need to define this area in regions.cfg
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

use os;
use uo;
use cfgfile;

include ":staff:include/staff";
include ":gumps:include/gumps";
include "include/areas";
include "include/constants/cfgfiles";
include "include/constants/propids";

var areas_cfg	:= ReadConfigfile(CFGFILE_AREAS);
var areas	:= GetConfigStringArray( areas_cfg[1], "Area" );

// Global properties stored as bits
var guarded := GetGlobalProperty(PROPID_GLOBAL_AREAS_GUARDED);
var norecallto := GetGlobalProperty(PROPID_GLOBAL_AREAS_NORECALL);
var norecallfrom := GetGlobalProperty(PROPID_GLOBAL_AREAS_NORECALLFROM);
var disabledmarking := GetGlobalProperty(PROPID_GLOBAL_AREAS_NOMARKING);
var disablemagic := GetGlobalProperty(PROPID_GLOBAL_AREAS_ANTIMAGIC);
var forbiddenarea := GetGlobalProperty(PROPID_GLOBAL_AREAS_FORBIDDEN);
var nolooting := GetGlobalProperty(PROPID_GLOBAL_AREAS_NOLOOTING);
var safearea := GetGlobalProperty(PROPID_GLOBAL_AREAS_SAFEAREA);
var nopk := GetGlobalProperty(PROPID_GLOBAL_AREAS_NOPK);
var rparea := GetGlobalProperty(PROPID_GLOBAL_AREAS_RPAREA);

set_script_option(SCRIPTOPT_NO_RUNAWAY,1);

Program areas(who)
	// don't log changes, too big!
	LogCommand(who, GetProcess(GetPid()).name);

var gump := GFCreateGump(20, 20, 860, 520);

// The main gump screen
GFResizePic(gump, 20, 20, 9250, 860, 525);

// The area background gumps
GFResizePic(gump, 35, 220, 9200, 830, 285);
GFResizePic(gump, 35, 180, 9200, 830, 40);

// Title text
GFResizePic(gump, 175, 35, 9200, 100, 20);
GFTextLine(gump, 180, 35, 67, "AREA SET-UP");

// Button info
GFTextLine(gump, 110, 70, 57, "Edit Area Boundaries");
GFAddButton(gump, 60, 70, 4005, 4006, 1, 2); 
GFTextLine(gump, 110, 105, 57, "Add Area");
GFAddButton(gump, 60, 105, 4005, 4006, 1, 4); 
GFTextLine(gump, 110, 140, 57, "Delete Area");
GFAddButton(gump, 60, 140, 4005, 4006, 1, 6); 

// HTML gump
GFHTMLArea(gump, 405, 35, 390, 140, GetHelpString(), 1, 1);

// Names for all the options
GFTextLine(gump, 96, 185, 900, "Area");
GFTextLine(gump, 95, 200, 900, "Name");

GFTextLine(gump, 190, 185, 900, "Guarded");
GFTextLine(gump, 195, 200, 900, "Area");

GFTextLine(gump, 260, 185, 900, "Disabled");
GFTextLine(gump, 255, 200, 900, "Recall To");

GFTextLine(gump, 330, 185, 900, "Disabled");
GFTextLine(gump, 320, 200, 900, "Recall From");

GFTextLine(gump, 400, 185, 900, "Disabled");
GFTextLine(gump, 400, 200, 900, "Marking");

GFTextLine(gump, 467, 185, 900, "Disabled");
GFTextLine(gump, 475, 200, 900, "Magic");

GFTextLine(gump, 535, 185, 900, "Forbidden");
GFTextLine(gump, 545, 200, 900, "Area");

GFTextLine(gump, 610, 185, 900, "Disabled");
GFTextLine(gump, 612, 200, 900, "Looting");

GFTextLine(gump, 685, 185, 900, "Safe");
GFTextLine(gump, 685, 200, 900, "Area");

GFTextLine(gump, 760, 185, 900, "No-PK");
GFTextLine(gump, 760, 200, 900, "Area");

GFTextLine(gump, 830, 185, 900, "RP");
GFTextLine(gump, 830, 200, 900, "Area");

// Block of text that displays current area info
var y := 230;
var perpage := 11;
var totalpages := CInt(areas.size()/11)+1; // Very lazy, but works unless there are enough elements for EXACTLY a page number, fix later
var page := 1;
var retval := 0;

GFPage(gump, 1);
GFTextLine(gump, 330, 508, 1000, "Page 1 of "+totalpages);
foreach area in areas

	if (perpage <= 0)
		GFAddButton(gump, 765, 506, 4005, 4006, 0, page+1); // Next Page button
		GFPage(gump, page+1);
		GFAddButton(gump, 35, 506, 4014, 4015, 0, page); // Prev Page button
		page := page + 1;
		GFTextLine(gump, 360, 508, 1000, "Page "+page+" of "+totalpages);
		y := 230;
		perpage := 11;
	endif

	// Seperate each type into a group
	retval := _area_iter*10;

	GFTextLine(gump, 35, y, 0, GetAreaName(area));
	GFCheckBox(gump, 200, y, 9026, 9027, guarded[_area_iter], retval+1);
	GFCheckBox(gump, 270, y, 9026, 9027, norecallto[_area_iter], retval+2);
	GFCheckBox(gump, 340, y, 9026, 9027, norecallfrom[_area_iter], retval+3);
	GFCheckBox(gump, 410, y, 9026, 9027, disabledmarking[_area_iter], retval+4);
	GFCheckBox(gump, 480, y, 9026, 9027, disablemagic[_area_iter], retval+5);
	GFCheckBox(gump, 550, y, 9026, 9027, forbiddenarea[_area_iter], retval+6);
	GFCheckBox(gump, 620, y, 9026, 9027, nolooting[_area_iter], retval+7);
	GFCheckBox(gump, 690, y, 9026, 9027, safearea[_area_iter], retval+8);
	GFCheckBox(gump, 760, y, 9026, 9027, nopk[_area_iter], retval+9);
	GFCheckBox(gump, 830, y, 9026, 9027, rparea[_area_iter], retval+10);
	perpage := perpage - 1;
	y := y + 25;
endforeach
// End large block of text


var result := GFSendGump(who, gump);

if (result[0] > 1 && result < 7)
	SendSysMessage(who, "These options are not yet supported.");
endif

SetAllValues(result.keys);

SendSysMessage(who, "Data saved.");

endprogram

////////////////////////////////////////////////////////////////////////////////////
// Toadstool
//
// SetAllValues() - Sets all values, creates global props if don't exist etc
//
////////////////////////////////////////////////////////////////////////////////////
function SetAllValues(data)

	var mine := 0;
	guarded := {};
	norecallto := {};
	norecallfrom := {};
	disabledmarking := {};
	disablemagic := {};
	forbiddenarea := {};
	nolooting := {};
	safearea := {};
	nopk := {};
	rparea := {};

	// areas.cfg is the master file, until we use custom areas in a data file, this is it
	foreach area in areas
		guarded.append(0);
		norecallto.append(0);
		norecallfrom.append(0);
		disabledmarking.append(0);
		disablemagic.append(0);
		forbiddenarea.append(0);
		nolooting.append(0);
		safearea.append(0);
		nopk.append(0);
		rparea.append(0);

		foreach val in data
			mine := (val-(_area_iter*10));
			case(mine)
			1: guarded[_area_iter] := 1;
			2: norecallto[_area_iter] := 1;
			3: norecallfrom[_area_iter] := 1;
			4: disabledmarking[_area_iter] := 1;
			5: disablemagic[_area_iter] := 1;
			6: forbiddenarea[_area_iter] := 1;
			7: nolooting[_area_iter] := 1;
			8: safearea[_area_iter] := 1;
			9: nopk[_area_iter] := 1;
			10: rparea[_area_iter] := 1;
			endcase
		endforeach

	endforeach

	SetGlobalProperty(PROPID_GLOBAL_AREAS_GUARDED, guarded);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_NORECALL, norecallto);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_NORECALLFROM, norecallfrom);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_NOMARKING, disabledmarking);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_ANTIMAGIC, disablemagic);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_FORBIDDEN, forbiddenarea);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_NOLOOTING, nolooting);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_SAFEAREA, safearea);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_NOPK, nopk);
	SetGlobalProperty(PROPID_GLOBAL_AREAS_RPAREA, rparea);

endfunction
////////////////////////////////////////////////////////////////////////////////////
// Toadstool
//
// GetAreaName() - function to extract the areas name from a string
//
////////////////////////////////////////////////////////////////////////////////////
function GetAreaName(area)

	var areaname := "";
	var splited := SplitWords(area);
	//area.reverse();
	//area.shrink(area.size()-4);
	//area.reverse();
	var description := splited[6];

	//foreach word in area
		areaname := " " + description;
	//endforeach

	return areaname;

endfunction

////////////////////////////////////////////////////////////////////////////////////
// Toadstool
//
// GetHelpString() - Simply returns a HTML formatted string
//
////////////////////////////////////////////////////////////////////////////////////
function GetHelpString()

	return "<BASEFONT COLOR=darkblue size=20><center><u>Area Information</u></center><BASEFONT COLOR=black size=4>This is the new command that replaces multiple other commands.  Just tick the corresponding boxes to set that property to the area.  Below are explanations for each option.<br><br><BASEFONT COLOR=darkblue><u>Guarded Area:</u><BASEFONT COLOR=black> Tick to enable the .guards command in the area<br><BASEFONT COLOR=darkblue><u>Disabled Recall To:</u><BASEFONT COLOR=black> Tick to disable recalling to the area.<br><BASEFONT COLOR=darkblue><u>Disabled Recall From:</u><BASEFONT COLOR=black> Tick to disable recalling from the area.<br><BASEFONT COLOR=darkblue><u>Disabled Marking:</u><BASEFONT COLOR=black> Tick to disable marking within the area.<br><BASEFONT COLOR=darkblue><u>Disabled Magic:</u><BASEFONT COLOR=black> Tick to disable the casting of spells in the area.<br><BASEFONT COLOR=darkblue><u>Forbidden Area:</u><BASEFONT COLOR=black> Tick to set this area as forbidden, teleporting players out.<br><BASEFONT COLOR=darkblue><u>Disabled Looting:</u><BASEFONT COLOR=black> Tick to disable looting of other players in the area.<br><BASEFONT COLOR=darkblue><u>Safe Zone:</u><BASEFONT COLOR=black> Tick to set the area as a safe zone, no damage, no guard area. Note: Only areas defined in regions.cfg fully support this feature.<br><BASEFONT COLOR=darkblue><u>NO-PK:</u><BASEFONT COLOR=black> Tick to set the area as a No-PK zone, this will only disable people from targeting eachother and will probably have some way of getting around this option. Note: Only areas defined in regions.cfg fully support this feature.<br><BASEFONT COLOR=darkblue><u>RP Area:</u><BASEFONT COLOR=black> Tick to set the area as a Roleplaying zone. This will only disable people from targeting eachother and will probably have some way of getting around this option.";

endfunction
