// Made by a Giraffe

use uo;

include "include/client";
include "util/key";
include ":gumps:yesno";
include ":housing:setup";

Const UOBJECT_DOORS_START := 0x0675;
Const UOBJECT_DOORS_END   := 0x06f4;

program textcmd_addhouse( who )

	
	var owner;
	var signtype;
	var sign;
	var minx;
	var maxx;
	var miny;
	var maxy;
	var item;
	var i := 0;
	var k := 0;
	var z := who.z;
	var door;

	var price := RequestInput( who, who.backpack, "What is the price of the house? (esc to exit)" );
	if(!price)
		SendSysMessage( who, "Cancelled.");
	endif
	signtype := RequestInput( who, who.backpack, "Should the sign be facing E or S?" );
	if(!signtype)
		SendSysMessage( who, "Cancelled");
	endif

	SendSysMessage( who, "Select where to place sign." );
	var signplace := TargetCoordinates( who );
	if( lower(signtype) == "e" )
		sign := CreateItemAtLocation( signplace.x, signplace.y, signplace.z, 0x755f, 1 );
	elseif( lower(signtype) == "s" )
		sign := CreateItemAtLocation( signplace.x, signplace.y, signplace.z, 0x755e, 1 );
	else
		SendSysMessage( who, "You need to select E or S for the signtype." );
		return;
	endif

	SetObjProperty( sign, "houseserial", sign.serial );

	while( YesNo( who, "Add another area?" ) )
		SendSysMessage( who, "Please select the first corner." );
		var corner1 := TargetCoordinates( who );
		if( !corner1 )
			SendSysMessage( who, "Cancelled.");
			WipeIt( who, sign );
			return;
		endif
		SendSysMessage( who, "Please select the second corner." );
		var corner2 := TargetCoordinates( who );
		if( !corner2 )
			SendSysMessage( who, "Cancelled.");
			WipeIt( who, sign );
			return;
		endif
		if( corner1.x <= corner2.x )
			minx := corner1.x;
			maxx := corner2.x;
		else
			minx := corner2.x;
			maxx := corner1.x;
		endif

		if( corner1.y <= corner2.y )
			miny := corner1.y;
			maxy := corner2.y;
		else
			miny := corner2.y;
			maxy := corner2.y;
		endif
	
		i := minx;
		k := miny;
		while( i <= maxx )
			while( k <= maxy )
				item := CreateItemAtLocation( i, k, z, 0x755d, 1);
				SetObjProperty( item, "HousePlate", 1 );
				SetObjProperty( item, "houseserial", sign.serial );
				k += 1;
			endwhile
			k := miny;
			i += 1;
		endwhile

	endwhile

	var houseserial := GetObjProperty( sign, "houseserial" );
	var lockid := AllocLockId();
	SetObjProperty( sign, "lockid", lockid );

	while( YesNo( who, "Add lock?" ) )
		SendSysMessage( who, "Select a door to add a lock to." );
		door := Target( who, TGTOPT_NOCHECK_LOS  );
		if( ((door.objtype >= UOBJECT_DOORS_START) && (door.objtype <= UOBJECT_DOORS_END)) )
			SetObjProperty( door, "lockid", lockid );
			SetObjProperty( door, "HouseDoor", 1 );
			SetObjProperty( door, "houseserial", sign.serial );
			door.locked := 1;
		else
			SendSysMessage( who, "That is not a door.");
		endif
	endwhile
	var doortile;
	var items;
	var tile;
	while( YesNo( who, "Add another door tile?") )
		SendSysMessage( who, "Please mark the tile just inside the door.");
		doortile := TargetCoordinates(who);
		items := ListItemsNearLocationOfType( doortile.x, doortile.y, doortile.z, 0, 0x755d );
		foreach item in items
			DestroyItem(item);
		endforeach
		tile := CreateItemAtLocation( doortile.x, doortile.y, doortile.z, 0x755c, 1);
		SetObjProperty( tile, "HousePlate", 1 );
		SetObjProperty( tile, "houseserial", sign.serial );
	endwhile
	
	var maxlockdowns := cint(RequestInput( who, who.backpack, "Enter the maximum amount of lockdowns for this house (esc to exit)" ));
	if(!maxlockdowns)
		SendSysMessage( who, "Cancelled.");
		WipeIt( who, sign);
		return;
	endif

	var maxsecures := cint(RequestInput( who, who.backpack, "Enter the maximum amount of secures for this house (esc to exit)" ));
	if(!maxsecures)
		SendSysMessage( who, "Cancelled.");
		WipeIt( who, sign);
		return;
	endif
	
	SetObjProperty( sign, "MaxLockdowns", maxlockdowns );
	SetObjProperty( sign, "MaxSecures", maxsecures );
	SetObjProperty( sign, "CurrentSecures", 0);
	SetObjProperty( sign, "CurrentLockdowns", 0);
	SetObjProperty( sign, "Price", price );
	SetName(sign, "For sale: " + price + " gold." );

	if( YesNo( who, "Looks good?" ) )
		SendSysMessage( who, "House built." );
		HideIt( who, sign );

	else
		SendSysMessage( who, "Cancelled." );
		WipeIt( who, sign );
		//DestroyItem( sign );
		//DestroyItem( key);
	endif
	


endprogram

function HideIt( who, sign )

	foreach item_type in tile_list
		foreach item in ListItemsNearLocationOfType( who.x,who.y, LIST_IGNORE_Z, 50, item_type );
			if( GetObjProperty( item, "HousePlate" ) && ( GetObjProperty( item, "houseserial" ) == sign.serial ) )
				//DestroyItem( item );
				item.invisible:= 1;
			endif
		endforeach
	endforeach

endfunction

function WipeIt( who, sign )

	foreach item in ListItemsNearLocation( sign.x, sign.y, LIST_IGNORE_Z, 50, sign.realm);
		if(GetObjProperty( item, "houseserial" ) == GetObjProperty(sign, "houseserial"))
			if( GetObjProperty( item, "HousePlate" ) )
				DestroyItem( item );
			endif
			if( ((item.objtype >= UOBJECT_DOORS_START) && (item.objtype <= UOBJECT_DOORS_END)) && (GetObjProperty(item, "HouseDoor") == 1) )
				EraseObjProperty(item, "HouseDoor");
				item.locked := 0;
			endif
			if( item.objtype == 0xE41 || item.objtype == 0xE40 )
				DestroyItem( item );
			endif
		endif
	endforeach
	
	DestroyItem(sign);
endfunction